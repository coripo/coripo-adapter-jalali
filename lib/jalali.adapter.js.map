{"version":3,"sources":["../src/jalali.adapter.js"],"names":["jalaaliJs","require","Adapter","id","name","description","months","short","l10n","date","newDate","toJalaali","year","month","day","ldate","jy","jm","jd","i18n","toGregorian","gy","gm","gd","getMonthName","mon","Error","getMonthLength","jalaaliMonthLength","isValid","isValidJalaaliDate","isLeap","isLeapJalaaliYear","offsetYear","offset","offsetMonth","newYear","Math","floor","newOffset","newMonth","newDay","min","offsetDay","i18nDate","jsDate","Date","setDate","getDate","getFullYear","getMonth","exports"],"mappings":"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","file":"jalali.adapter.js","sourcesContent":["const jalaaliJs = require('jalaali-js');\n\nconst Adapter = function Adapter() {\n  const id = 'coripo.coripo.adapter.jalali';\n  const name = 'Jalali';\n  const description = 'The Jalali calendar is a solar calendar that was used in Persia, variants of which today are still in use in Iran as well as Afghanistan.';\n\n  const months = [\n    { name: 'Farvardin', short: 'Farv' },\n    { name: 'Ordibehesht', short: 'Ord' },\n    { name: 'Khordad', short: 'Kho' },\n    { name: 'Tir', short: 'Tir' },\n    { name: 'Mordad', short: 'Mor' },\n    { name: 'Shahrivar', short: 'Sha' },\n    { name: 'Mehr', short: 'Mehr' },\n    { name: 'Aban', short: 'Aban' },\n    { name: 'Azar', short: 'Azar' },\n    { name: 'Dey', short: 'Dey' },\n    { name: 'Bahman', short: 'Bah' },\n    { name: 'Esfand', short: 'Esf' },\n  ];\n\n  const l10n = (date) => {\n    const newDate = jalaaliJs.toJalaali(date.year, date.month, date.day);\n    const ldate = {\n      year: newDate.jy,\n      month: newDate.jm,\n      day: newDate.jd,\n    };\n    return ldate;\n  };\n  const i18n = (ldate) => {\n    const newDate = jalaaliJs.toGregorian(ldate.year, ldate.month, ldate.day);\n    const date = {\n      year: newDate.gy,\n      month: newDate.gm,\n      day: newDate.gd,\n    };\n    return date;\n  };\n\n  const getMonthName = (month, short) => {\n    const mon = (months[month - 1]);\n    if (typeof mon === 'undefined') {\n      throw new Error('Invalid month number, number should be between 1 and 12');\n    }\n    return short ? mon.short : mon.name;\n  };\n\n  const getMonthLength = (year, month) => jalaaliJs.jalaaliMonthLength(year, month);\n\n  const isValid = date => jalaaliJs.isValidJalaaliDate(date.year, date.month, date.day);\n\n  const isLeap = year => jalaaliJs.isLeapJalaaliYear(year);\n\n  const offsetYear = (date, offset) => ({\n    year: date.year + offset,\n    month: date.month,\n    day: date.day,\n  });\n\n  const offsetMonth = (date, offset) => {\n    const newYear = date.year + Math.floor((offset + (date.month - 1)) / 12);\n    const newOffset = offset % 12;\n    const newMonth = ((12 + (date.month - 1) + newOffset) % 12) + 1;\n    const newDay = Math.min(date.day, getMonthLength(newYear, newMonth));\n    return {\n      year: newYear,\n      month: newMonth,\n      day: newDay,\n    };\n  };\n\n  const offsetDay = (date, offset) => {\n    /*\n      im not sure if its 100% accurate\n      should be checked\n    */\n    const i18nDate = i18n({ year: date.year, month: date.month, day: date.day });\n    const jsDate = new Date(`${i18nDate.year}-${i18nDate.month}-${i18nDate.day}`);\n    jsDate.setDate(jsDate.getDate() + offset);\n    return l10n({\n      year: jsDate.getFullYear(),\n      month: jsDate.getMonth() + 1,\n      day: jsDate.getDate(),\n    });\n  };\n\n  return {\n    id,\n    name,\n    description,\n    l10n,\n    i18n,\n    isValid,\n    isLeap,\n    getMonthName,\n    getMonthLength,\n    offsetYear,\n    offsetMonth,\n    offsetDay,\n  };\n};\n\nexports.Adapter = Adapter;\n"]}